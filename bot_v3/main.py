import asyncio
import logging
from aiogram import F, Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from handlers.user_profile.profile_keyboards import get_profile_keyboard
from handlers.user_profile.profile_utils import get_profile_text
from config import BOT_TOKEN
from handlers.keyboards import get_main_menu, get_class_schedule_menu

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
from handlers.study import router as study_router
from handlers.user_profile.profile_handlers import router as profile_router
from handlers.exams.exams_handlers import router as exams_router
# from handlers.retakes import router as retakes_router  # –ë—É–¥—É—â–∏–π –º–æ–¥—É–ª—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(profile_router)  # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dp.include_router(exams_router)    # –≠–∫–∑–∞–º–µ–Ω—ã
dp.include_router(study_router)    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
# dp.include_router(retakes_router)  # –ü–µ—Ä–µ—Å–¥–∞—á–∏

# –°—Ç–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
menu_stack = []

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        types.BotCommand(command="profile", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands)

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def cmd_start(message: Message):
    menu_stack.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ú–ò–°–∏–°.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=get_main_menu()
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"
    )

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            text=await get_profile_text(message.from_user.id),
            reply_markup=get_profile_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_profile: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    if menu_stack:
        previous_menu = menu_stack.pop()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é", reply_markup=previous_menu)
    else:
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=get_main_menu())

@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π")
async def class_schedule(message: types.Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π"""
    menu_stack.append(get_main_menu())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_class_schedule_menu()
    )

@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
async def session_schedule(message: types.Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    from handlers.exams.exams_handlers import get_session_menu
    menu_stack.append(get_main_menu())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_session_menu()
    )

"""@dp.message()
async def handle_message(message: Message):
    #–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±—ã—Å—Ç—Ä—ã–º –ø–æ–∏—Å–∫–æ–º
    text = message.text
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏
    if text in ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏", "–ù–∞–∑–∞–¥"]:
        return
    
    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ (–∏–∑ handlers.study)
    from handlers.study.quick_search import detect_and_search
    search_result = detect_and_search(text)
    
    if search_result["matches"]:
        if search_result["type"] == "teacher":
            await message.answer(f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(search_result["matches"]))
        elif search_result["type"] == "group":
            await message.answer(f"–ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã:\n" + "\n".join(search_result["matches"]))
        elif search_result["type"] == "room":
            await message.answer(f"–ù–∞–π–¥–µ–Ω—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n" + "\n".join(search_result["matches"]))
    else:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")"""

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())