import asyncio
import logging
from aiogram import F, Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–∏—Ç—É
# –Ω—É –∏ –µ—â–µ
from config import BOT_TOKEN
from handlers.keyboards import get_main_menu, get_class_schedule_menu

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
from handlers.study import router as study_router
from handlers.user_profile.profile_handlers import router as profile_router
# from handlers.exams import router as exams_router  # –ë—É–¥—É—â–∏–π –º–æ–¥—É–ª—å
# from handlers.retakes import router as retakes_router  # –ë—É–¥—É—â–∏–π –º–æ–¥—É–ª—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(profile_router)  # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dp.include_router(study_router)    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
# dp.include_router(exams_router)  # –≠–∫–∑–∞–º–µ–Ω—ã
# dp.include_router(retakes_router)  # –ü–µ—Ä–µ—Å–¥–∞—á–∏

# –°—Ç–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
menu_stack = []

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands(bot: Bot):
    commands = [
        types.BotCommand(command="start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        types.BotCommand(command="profile", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands)

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def cmd_start(message: Message):
    menu_stack.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ú–ò–°–∏–°.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=get_main_menu()
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"
    )

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    if menu_stack:
        previous_menu = menu_stack.pop()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é", reply_markup=previous_menu)
    else:
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=get_main_menu())

@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π")
async def class_schedule(message: types.Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π"""
    menu_stack.append(get_main_menu())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_class_schedule_menu()
    )

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await set_bot_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())