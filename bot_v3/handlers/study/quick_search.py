from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from typing import Union
from typing import List
import logging
import re

from .common import loadData, user_selections, get_day
from .current_schedule import get_schedule


from handlers.keyboards import (
    get_weekday_buttons,
    get_room_weekday_buttons,
    get_full_schedule_menu,
    get_institutes_menu,
    get_class_schedule_menu,
    get_teacher_weekday_buttons
)


router = Router()



def detect_and_search(query: str) -> dict:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    query = query.strip().upper()
    result = {"type": None, "matches": []}
    
    #print(f"\n=== DEBUG: –ü–æ–∏—Å–∫ '{query}' ===")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    # 1. –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)
    if query.isalpha():
        #print("–¢–∏–ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        teachers = loadData("teacher").keys()
        
        matches = [t for t in teachers if t.split()[0].upper().startswith(query)]
        if matches:
            #print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(matches)}")
            return {"type": "teacher", "matches": sorted(matches)}
    
    # 2. –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø (—Ñ–æ—Ä–º–∞—Ç: –ë–£–¢-21-1)
    if re.match(r'^[–ê-–ØA-Z]{2,}(-\d{2,})?(-\d)?$', query):
        #print("–¢–∏–ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã")
        all_groups = loadData("schedule").keys()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å (–ë–ü–ú 21-1 ‚Üí –ë–ü–ú-21-1)
        normalized = normalize_group_name(query)
        #print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {normalized}")
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matches = [g for g in all_groups if g.startswith(normalized)]
        if matches:
            #print(f"–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(matches)}")
            return {"type": "group", "matches": sorted(matches)}
    
    # 3. –ü–æ–∏—Å–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–π (—Ñ–æ—Ä–º–∞—Ç: –õ-711 –∏–ª–∏ –õ711)
    #print("–¢–∏–ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
    all_rooms = loadData("location").keys()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å (–ª711 ‚Üí –õ-711)
    normalized = normalize_room_name(query)
    #print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {normalized}")
    
    # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ –¥–µ—Ñ–∏—Å–∞
    matches = [
        r for r in all_rooms 
        if normalize_room_name(r) == normalized 
        or r.replace("-", "") == normalized.replace("-", "")
    ]
    
    if matches:
        #print(f"–ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏—Ç–æ—Ä–∏–π: {len(matches)}")
        return {"type": "room", "matches": sorted(matches)}
    
    #print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return {"type": None, "matches": []}



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≥—Ä—É–ø–ø—ã/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏/–∞—É–¥–∏—Ç–æ—Ä–∏–∏)
@router.callback_query(F.data.startswith("full_"))
async def handle_full_schedule_choice(call: CallbackQuery):
    choice = call.data.split("_")[1]
    
    if choice == "group":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
            reply_markup=get_institutes_menu()
        )
    elif choice == "teacher":
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
            reply_markup=None
        )
    elif choice == "room":
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ711, –ë-123):",
            reply_markup=None
        )
    elif choice == "back":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=get_class_schedule_menu()
        )


def get_room_schedule(room: str, week_type: str, day: str, schedule: dict) -> str:
    #–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏#
    if room not in schedule:
        return "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ ü§î"
    
    response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {room}</b>\n"
    response += f"{day}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è:\n\n"
    
    times = {
        "1": "9:00-10:35", "2": "10:50-12:25", "3": "12:40-14:15",
        "4": "14:30-16:05", "5": "16:20-17:55", "6": "18:00-19:25", "7": "19:35-21:00"
    }
    
    if day not in schedule[room]:
        return f"{response}–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥"
    
    pairs_info = []
    for pair_num, pair_data in schedule[room][day].items():
        week_data = pair_data.get(week_type, {}).get("subjects", {})
        
        for subject, subject_data in week_data.items():
            subject_name, *teacher = subject.split("\n")
            teacher = teacher[0] if teacher else ""
            
            groups = []
            for group, group_data in subject_data.get("groups", {}).items():
                subgroups = group_data.get("subGroups", [])
                groups.append(f"{group} [{', '.join(subgroups)}]")
            
            if groups:
                pairs_info.append({
                    "num": pair_num,
                    "time": times.get(pair_num, ""),
                    "subject": subject_name,
                    "teacher": teacher,
                    "groups": "\n".join(groups)
                })
    
    if pairs_info:
        for pair in sorted(pairs_info, key=lambda x: x["num"]):
            response += (
                f"{pair['num']} –ø–∞—Ä–∞ ({pair['time']})\n"
                f"<b>{pair['subject']}</b>\n"
            )
            if pair["teacher"]:
                response += f"{pair['teacher']}\n"
            response += f"{pair['groups']}\n\n"
    else:
        response += "–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"
    
    response += f"–°–µ–≥–æ–¥–Ω—è {day}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è"
    return response


# –•—ç–Ω–¥–ª–µ—Ä—ã
@router.message(F.text)
async def handle_quick_search(message: Message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = message.text.strip()
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)
    if query.isalpha():
        teachers = find_teachers_by_last_name(query)
        
        if not teachers:
            await message.answer("üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        buttons = [
            [InlineKeyboardButton(
                text=teacher,
                callback_data=f"teacher_select_{teacher}"
            )]
            for teacher in teachers[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        ]
        
        await message.answer(
            "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        return
    
    # 2. –ï—Å–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≥—Ä—É–ø–ø—É/–∞—É–¥–∏—Ç–æ—Ä–∏—é
    search_result = detect_and_search(query)
    
    if not search_result["matches"]:
        await message.answer(
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∞: <code>–ë–ü–ú-21-1</code> –∏–ª–∏ <code>–ë–ü–ú-21</code>\n"
            "‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: <code>–õ-711</code> –∏–ª–∏ <code>–õ711</code>\n"
            "‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <code>–ò–≤–∞–Ω–æ–≤</code>",
            parse_mode="HTML"
        )
        return
    
    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π
    if search_result["type"] == "group":
        if len(search_result["matches"]) == 1:
            await show_group_schedule(message, search_result["matches"][0], "all")
        else:
            buttons = [
                [InlineKeyboardButton(
                    text=group,
                    callback_data=f"quick_group_{group}"
                )]
                for group in search_result["matches"][:10]
            ]
            await message.answer(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø {len(search_result['matches'])}:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    
    elif search_result["type"] == "room":
        if len(search_result["matches"]) == 1:
            await show_room_schedule(message, search_result["matches"][0])
        else:
            buttons = [
                [InlineKeyboardButton(
                    text=room,
                    callback_data=f"quick_room_{room}"
                )]
                for room in search_result["matches"][:10]
            ]
            await message.answer(
                f"üîç –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏—Ç–æ—Ä–∏–π ({len(search_result['matches'])}:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )


async def show_room_schedule(message: Message, room: str):
    #–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏#
    try:
        today = get_day()
        current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"
        
        schedule_data = loadData("location")
        
        schedule = get_room_schedule(room, current_week, today, schedule_data)
        await message.answer(
            schedule,
            parse_mode="HTML",
            reply_markup=get_room_weekday_buttons(room)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


async def handle_room_search(message: Message):
    today = get_day()
    current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏#
    room_input = message.text.strip()
    room = normalize_room_name(room_input)
    
    try:
        schedule_data = loadData("location")
        
        if room not in schedule_data:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            similar_rooms = [r for r in schedule_data.keys() if room in r or room.replace("-", "") in r.replace("-", "")]
            
            if not similar_rooms:
                await message.answer("–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑.")
                return
            
            if len(similar_rooms) == 1:
                room = similar_rooms[0]
            else:
                # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±–æ—Ä –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π
                buttons = []
                for r in similar_rooms[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    buttons.append([InlineKeyboardButton(
                        text=r,
                        callback_data=f"quick_room_{r}"
                    )])
                
                await message.answer(
                    "–£—Ç–æ—á–Ω–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
                return
        
        schedule = get_room_schedule(room, current_week, today, schedule_data)
        await message.answer(schedule, parse_mode="HTML", reply_markup=get_room_weekday_buttons(room))
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



async def handle_group_search(message: Message):
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã#
    user_input = message.text.strip()
    group = normalize_group_name(user_input)
    
    try:
        schedule_data = loadData("schedule")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if group in schedule_data:
            await show_group_schedule(message, group, "all")
            return
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≥—Ä—É–ø–ø—ã
        similar_groups = find_group_matches(group)
        
        if not similar_groups:
            await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        
        if len(similar_groups) == 1:
            await show_group_schedule(message, similar_groups[0], "all")
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            buttons = []
            for g in similar_groups[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                buttons.append([InlineKeyboardButton(
                    text=g,
                    callback_data=f"quick_group_{g}"
                )])
            
            await message.answer(
                "–£—Ç–æ—á–Ω–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



async def handle_teacher_search(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    last_name = message.text.strip()
    if not last_name.isalpha():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)")
        return
    
    teachers = find_teachers_by_last_name(last_name)
    
    if not teachers:
        await message.answer(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å —Ñ–∞–º–∏–ª–∏–µ–π '{last_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞
    response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n\n"
    buttons = []
    
    for teacher in teachers[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        # –†–∞–∑–¥–µ–ª—è–µ–º –§–ò–û –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        last, initials = teacher.split(" ", 1)
        response += f"‚ñ™Ô∏è {last} {initials}\n"
        buttons.append([InlineKeyboardButton(
            text=f"{last} {initials}",
            callback_data=f"teacher_select_{teacher}"
        )])
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await message.answer(response)
    
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )



@router.callback_query(F.data.startswith("quick_room_"))
async def handle_quick_room_select(call: types.CallbackQuery):
    today = get_day()
    current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏#
    if call.data == "quick_room_cancel":
        await call.message.delete()
        return
    
    room = call.data.split("_")[2]
    
    try:
        schedule_data = loadData("location")
        
        schedule = get_room_schedule(room, current_week, today, schedule_data)
        await call.message.edit_text(
            text=schedule,
            reply_markup=get_room_weekday_buttons(room),
            parse_mode="HTML"
        )
    except Exception as e:
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@router.callback_query(F.data.startswith("quick_group_"))
async def handle_quick_group_select(call: types.CallbackQuery):
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤#
    if call.data == "quick_group_cancel":
        await call.message.delete()
        return
    
    group = call.data.split("_")[2]
    await show_group_schedule(call, group, "all")



@router.callback_query(F.data.startswith("roomday_"))
async def handle_room_day_selection(call: CallbackQuery):
    try:
        _, day_type, week_type, room = call.data.split("_", 3)
        day_russian = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "wednesday": "–°—Ä–µ–¥–∞",
            "thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "friday": "–ü—è—Ç–Ω–∏—Ü–∞", "saturday": "–°—É–±–±–æ—Ç–∞"
        }.get(day_type.lower(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")
        
        schedule_data = loadData("location")
        
        schedule = get_room_schedule(room, week_type, day_russian, schedule_data)
        
        await call.message.edit_text(
            text=schedule,
            reply_markup=get_room_weekday_buttons(room),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–Ω—è: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@router.callback_query(F.data == "room_schedule_back")
async def handle_room_back(call: CallbackQuery):
    #–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è#
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_full_schedule_menu()
    )


@router.callback_query(F.data == "room_schedule_back")
async def handle_room_schedule_back(call: CallbackQuery):
    #–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è#
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_full_schedule_menu()
    )



@router.callback_query(F.data == "full_back")
async def handle_full_back(call: CallbackQuery):
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_full_schedule_menu()
    )








# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def normalize_group_name(group: str) -> str:
    #–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–ë–ò–í–¢-21-1)#
    group = group.upper().replace(" ", "-")
    parts = group.split("-")
    if len(parts) >= 2:
        return f"{parts[0]}-{parts[1]}" + (f"-{parts[2]}" if len(parts) > 2 else "")
    return group



def find_group_matches(query: str) -> list:
    #–ù–∞—Ö–æ–¥–∏—Ç –≥—Ä—É–ø–ø—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É#
    groups_data = loadData("groups")
    
    query = normalize_group_name(query)
    all_groups = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–∞
    for institute in groups_data.values():
        for year_groups in institute.values():
            all_groups.extend(year_groups)
    
    # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    exact_matches = [g for g in all_groups if g == query]
    if exact_matches:
        return exact_matches
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã)
    partial_matches = [g for g in all_groups if g.startswith(query)]
    if partial_matches:
        return partial_matches
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–∞—á–∞–ª—å–Ω—ã–º –±—É–∫–≤–∞–º –∏ –≥–æ–¥—É
    if "-" in query:
        base, year = query.split("-")[:2]
        similar = [g for g in all_groups if g.startswith(base) and year in g]
        return similar
    
    return []



def normalize_room_name(room: str) -> str:
    #–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–õ711 ‚Üí –õ-711)#
    room = re.sub(r'[^\w]', '', room).upper()
    if re.match(r'^[–ê-–ØA-Z]+\d+$', room):
        room = re.sub(r'([–ê-–ØA-Z]+)(\d+)', r'\1-\2', room)
    return room



def find_room_in_schedule(user_input: str, schedule: dict) -> str:
    #–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–≤–æ–¥—É#
    normalized = normalize_room_name(user_input)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if normalized in schedule:
        return normalized
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ –¥–µ—Ñ–∏—Å–∞
    room_no_dash = normalized.replace("-", "")
    for room in schedule.keys():
        if room.replace("-", "") == room_no_dash:
            return room
    
    return None



async def show_group_schedule(
    message_or_call: Union[Message, CallbackQuery], 
    group: str, 
    subgroup: str
):
    today = get_day()
    current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"

    #–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã#
    if isinstance(message_or_call, CallbackQuery):
        message = message_or_call.message
        user_id = message_or_call.from_user.id
    else:
        message = message_or_call
        user_id = message.from_user.id

    schedule_data = loadData("schedule")
    
    schedule = get_schedule(group, subgroup, current_week, today, schedule_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    user_selections[user_id] = {
        "selected_group": {
            "group": group,
            "subgroup": subgroup,
            "institute": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
    }
    
    await message.answer(
        schedule,
        reply_markup=get_weekday_buttons(),
        parse_mode="HTML"
    )






def find_teachers_by_last_name(last_name: str) -> List[str]:
    #–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏#
    try:
        teachers_data = loadData("teacher")
        
        # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–º–∏–ª–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–∞
        matches = []
        for full_name in teachers_data.keys():
            teacher_last_name = full_name.split()[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é
            if teacher_last_name.lower().startswith(last_name.lower()):
                matches.append(full_name)
        
        return sorted(matches)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


async def show_teacher_schedule(message: Message, teacher_name: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏ –Ω–µ–¥–µ–ª–∏"""
    try:
        teachers_data = loadData("teacher")
        
        if teacher_name not in teachers_data:
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é
        today = get_day()
        current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"
        
        if today in teachers_data[teacher_name]:
            schedule = format_teacher_day_schedule(
                teacher_name,
                teachers_data[teacher_name][today],
                current_week,
                today  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
            )
            await message.answer(
                schedule,
                parse_mode="HTML",
                reply_markup=get_teacher_weekday_buttons(teacher_name)
            )
        else:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–Ω—è –±–µ–∑ –ø–∞—Ä
            response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {teacher_name}</b>\n\n"
            response += f"{today}, {'–≤–µ—Ä—Ö–Ω—è—è' if current_week == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è\n\n"
            response += "–ü–∞—Ä –Ω–µ—Ç\n\n"
            response += f"–°–µ–≥–æ–¥–Ω—è {today}, {'–≤–µ—Ä—Ö–Ω—è—è' if current_week == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è"
            
            await message.answer(
                response,
                parse_mode="HTML",
                reply_markup=get_teacher_weekday_buttons(teacher_name)
            )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@router.callback_query(F.data.startswith("teacherday_"))
async def handle_teacher_day_selection(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        _, day_type, week_type, teacher_name = call.data.split("_", 3)
        day_russian = {
            "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "wednesday": "–°—Ä–µ–¥–∞", "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "friday": "–ü—è—Ç–Ω–∏—Ü–∞", "saturday": "–°—É–±–±–æ—Ç–∞"
        }.get(day_type.lower(), "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        
        teachers_data = loadData("teacher")
        
        if teacher_name not in teachers_data or day_russian not in teachers_data[teacher_name]:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–Ω—è –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {teacher_name}</b>\n\n"
            response += f"{day_russian}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è\n\n"
            response += "–ü–∞—Ä –Ω–µ—Ç\n\n"
            
            today = get_day()
            current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"
            response += f"–°–µ–≥–æ–¥–Ω—è {today}, {'–≤–µ—Ä—Ö–Ω—è—è' if current_week == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è"
            
            await call.message.edit_text(
                text=response,
                reply_markup=get_teacher_weekday_buttons(teacher_name),
                parse_mode="HTML"
            )
            return
        
        schedule = format_teacher_day_schedule(
            teacher_name,
            teachers_data[teacher_name][day_russian],
            week_type,
            day_russian  # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
        )
        
        await call.message.edit_text(
            text=schedule,
            reply_markup=get_teacher_weekday_buttons(teacher_name),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω—è: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def format_teacher_day_schedule(teacher_name: str, day_data: dict, week_type: str, day_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω—è"""
    response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {teacher_name}</b>\n\n"
    response += f"{day_name}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è\n\n"
    
    times = {
        "1": "09:00 ‚Äî 10:35", "2": "10:50 ‚Äî 12:25", 
        "3": "12:40 ‚Äî 14:15", "4": "14:30 ‚Äî 16:05",
        "5": "16:20 ‚Äî 17:55", "6": "18:00 ‚Äî 19:25", 
        "7": "19:35 ‚Äî 21:00"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
    has_pairs = any(week_type in pair_data for pair_data in day_data.values())
    
    if not has_pairs:
        response += "–ü–∞—Ä –Ω–µ—Ç\n\n"
    else:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        pairs_info = []
        for pair_num, pair_data in sorted(day_data.items()):
            if week_type in pair_data:
                subjects = pair_data[week_type].get("subjects", {})
                
                for subject, details in subjects.items():
                    subject_name = subject.split("\n")[0]
                    locations = ", ".join(details.get("locations", []))
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã
                    groups_list = []
                    for group, group_data in details.get("groups", {}).items():
                        subgroups = group_data.get("subGroups", [])
                        if len(subgroups) == 1 and subgroups[0] == "1":
                            groups_list.append(group)
                        else:
                            groups_list.append(f"{group} [{', '.join(subgroups)}]")
                    
                    groups_text = ", ".join(groups_list)
                    
                    pairs_info.append((
                        pair_num,
                        subject_name,
                        groups_text,
                        locations
                    ))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø–∞—Ä
        for pair_num, subject, groups, locations in pairs_info:
            response += (
                f"{pair_num} –ø–∞—Ä–∞ ({times[pair_num]})\n"
                f"<i>{subject}</i>\n"
                f"{groups}\n"
                f"{locations}\n\n"
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ –∏ –Ω–µ–¥–µ–ª–µ
    today = get_day()
    current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"
    response += f"–°–µ–≥–æ–¥–Ω—è {today}, {'–≤–µ—Ä—Ö–Ω—è—è' if current_week == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è"
    
    return response


@router.callback_query(F.data.startswith("teacher_select_"))
async def handle_teacher_selection(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        teacher_name = call.data.split("_", 2)[2]
        await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await show_teacher_schedule(call.message, teacher_name)
        await call.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")