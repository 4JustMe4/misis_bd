import json
import logging
import re
from typing import Dict, Union
from pathlib import Path
from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest

from handlers.study.common import loadData


def load_user_profile(user_id: int) -> Dict:
    try:
        return loadData("users").get(str(user_id), {
            "main_group": None,
            "subgroup": "all",
            "english_group": None,
            "saved_groups": []
        })
    except (FileNotFoundError, json.JSONDecodeError):
        return {
            "main_group": None,
            "subgroup": "all", 
            "english_group": None,
            "saved_groups": []
        }


def save_user_profile(user_id: int, profile: Dict):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path("data").mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            users = loadData("users")
        except (FileNotFoundError, json.JSONDecodeError):
            users = {}
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        required_fields = {
            "main_group": "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
            "subgroup": "all",
            "english_group": None,
            "saved_groups": []
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å defaults
        full_profile = {**required_fields, **profile}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≥—Ä—É–ø–ø—ã
        if full_profile["main_group"] and not re.match(r"^[–ê-–Ø]{2,}-\d{2,}-\d$", full_profile["main_group"]):
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã: {full_profile['main_group']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        users[str(user_id)] = full_profile
        
        # Atomic write
        temp_file = "data/users.temp.json"
        with open(temp_file, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º (atomic –æ–ø–µ—Ä–∞—Ü–∏—è)
        Path(temp_file).replace("data/users.json")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {user_id}: –≥—Ä—É–ø–ø–∞ {full_profile['main_group']}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {user_id}: {e}")
        raise

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    def verify_profile_saved(user_id: int, expected_group: str) -> bool:
        try:
            data = loadData("users")
            return data.get(str(user_id), {}).get("main_group") == expected_group
        except:
            return False
    

def validate_english_group(group_num: str) -> bool:
    try:
        return group_num in loadData("english_groups")
    except (FileNotFoundError, json.JSONDecodeError):
        return False
    


def get_subgroups_for_group(group: str) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–≥—Ä—É–ø–ø –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        schedule = loadData("schedule")
        
        if group not in schedule:
            return ["1", "2"]  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã –¥–ª—è –≥—Ä—É–ø–ø—ã
        subgroups = list(schedule[group].keys())
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã
        valid_subgroups = [sub for sub in subgroups if sub.isdigit()]
        
        return sorted(valid_subgroups) if valid_subgroups else ["1", "2"]
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø: {e}")
        return ["1", "2"]  # –§–æ–ª–±—ç–∫ –∑–Ω–∞—á–µ–Ω–∏—è
    

async def clear_previous_bot_messages(call: CallbackQuery, keep_last: int = 1):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N"""
    try:
        messages = await Bot.get_current().get_chat_administrators(call.message.chat.id)
        bot_id = (await Bot.get_current().me).id
        
        async for msg in Bot.get_current().get_chat_history(call.message.chat.id):
            if msg.from_user.id == bot_id and msg.message_id != call.message.message_id:
                await msg.delete()
                keep_last -= 1
                if keep_last <= 0:
                    break
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def get_profile_text(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    profile = load_user_profile(user_id)
    return (
        f"üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"‚ñ™ –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: {profile['main_group'] or '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'} ({profile['subgroup']})\n"
        f"‚ñ™ –ì—Ä—É–ø–ø–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É: {profile['english_group'] or '-'}\n"
        f"‚ñ™ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {len(profile['saved_groups'])}"
    )


async def delete_previous_bot_messages(call: CallbackQuery, keep_last: int = 1):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        bot = Bot.get_current()
        messages = []
        
        async for message in bot.get_chat_history(call.message.chat.id):
            if message.from_user.id == bot.id and message.message_id != call.message.message_id:
                messages.append(message)
                if len(messages) >= 10:  # –õ–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    break
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ N —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in messages[:-keep_last]:
            try:
                await msg.delete()
            except TelegramBadRequest:
                continue
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


def validate_profile(profile: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    return all(
        key in profile 
        for key in ["main_group", "subgroup", "english_group", "saved_groups"]
    )

async def debug_user_profile(user_id: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    profile = load_user_profile(user_id)
    logging.info(
        f"DEBUG PROFILE FOR {user_id}:\n"
        f"Main: {profile.get('main_group')}\n"
        f"Sub: {profile.get('subgroup')}\n"
        f"English: {profile.get('english_group')}\n"
        f"Saved: {len(profile.get('saved_groups', []))}"
    )


async def delete_previous_messages(call: CallbackQuery, keep_last: int = 1):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        bot = Bot.get_current()
        messages = []
        
        async for msg in bot.get_chat_history(call.message.chat.id):
            if msg.from_user.id == bot.id and msg.message_id != call.message.message_id:
                messages.append(msg)
                if len(messages) >= 10:  # –õ–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    break
        
        for msg in messages[:-keep_last]:
            try:
                await msg.delete()
            except:
                continue
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

def verify_group_change(user_id: int, expected_group: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    profile = load_user_profile(user_id)
    return profile.get("main_group") == expected_group

async def force_message_update(target: Union[Message, CallbackQuery], text: str, markup=None):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if isinstance(target, CallbackQuery):
            await target.message.delete()
            await target.message.answer(text, reply_markup=markup)
        else:
            await target.answer(text, reply_markup=markup)
    except Exception as e:
        logging.error(f"Force update failed: {e}")
        raise