from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers.study.common import loadData
from handlers.user_profile.profile_utils import get_subgroups_for_group

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∫–æ–ª–±—ç–∫–æ–≤
PR_ = "pr_"  # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ñ–∏–ª—è
MG_ = "mg_"  # –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞
SG_ = "sg_"  # –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã

def get_profile_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞", callback_data=MG_ + "start")],
        [InlineKeyboardButton(text="üî¢ –ü–æ–¥–≥—Ä—É–ø–ø–∞", callback_data=PR_ + "change_subgroup")],
        [InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data=PR_ + "set_english")],
        [InlineKeyboardButton(text="üìö –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã", callback_data=PR_ + "manage_saved")]
    ])

def get_english_group_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=PR_ + "back")]
    ])

def get_manage_saved_groups_keyboard(groups: list, is_remove_mode: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏"""
    buttons = []
    for i, g in enumerate(groups):
        btn_text = f"{'‚ùå ' if is_remove_mode else ''}{i+1}. {g['group']} ({g['subgroup']})"
        btn_data = PR_ + f"{'remove_' if is_remove_mode else 'show_'}{i}"
        buttons.append([InlineKeyboardButton(text=btn_text, callback_data=btn_data)])
    
    if not is_remove_mode:
        buttons.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=SG_ + "start"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=PR_ + "start_remove")
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=PR_ + "back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_institutes_menu(context: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ 3 –∫–æ–ª–æ–Ω–∫–∏"""
    prefix = MG_ if context == "main" else SG_
    institutes = list(loadData("groups").keys())
        
    
    buttons = []
    for i in range(0, len(institutes), 3):
        row = institutes[i:i+3]
        buttons.append([
            InlineKeyboardButton(text=inst, callback_data=prefix + f"inst_{inst}") 
            for inst in row
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=PR_ + "back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_years_menu(institute: str, context: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏"""
    prefix = MG_ if context == "main" else SG_
    years = list(loadData("groups").get(institute, {}).keys())
    
    buttons = []
    for i in range(0, len(years), 2):
        row = years[i:i+2]
        buttons.append([
            InlineKeyboardButton(text=year, callback_data=prefix + f"year_{year}") 
            for year in row
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=prefix + "back_inst")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_groups_menu(institute: str, year: str, context: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ 3 –∫–æ–ª–æ–Ω–∫–∏"""
    prefix = MG_ if context == "main" else SG_
    groups = loadData("groups").get(institute, {}).get(year, [])
    
    buttons = []
    for i in range(0, len(groups), 3):
        row = groups[i:i+3]
        buttons.append([
            InlineKeyboardButton(text=group, callback_data=prefix + f"group_{group}") 
            for group in row
        ])
    
    buttons.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", 
        callback_data=prefix + f"back_year_{institute}"
    )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subgroups_menu(group: str, context: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥–≥—Ä—É–ø–ø"""
    prefix = MG_ if context == "main" else SG_
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã
    subgroups = get_subgroups_for_group(group)
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø
    buttons = [
        [InlineKeyboardButton(
            text=f"–ü–æ–¥–≥—Ä—É–ø–ø–∞ {sub}",
            callback_data=f"{prefix}sub_{sub}"
        )]
        for sub in subgroups
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ" –µ—Å–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø –±–æ–ª—å—à–µ 1
    if len(subgroups) > 1:
        buttons.append([InlineKeyboardButton(
            text="–í—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã",
            callback_data=f"{prefix}sub_all"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    back_button = [InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"{prefix}back_group_{group.split('-')[0]}"
    )]
    buttons.append(back_button)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)