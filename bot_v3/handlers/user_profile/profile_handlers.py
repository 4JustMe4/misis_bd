import asyncio
from datetime import datetime
import logging
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from typing import Dict, Optional, Union

from handlers.loader import loadData
from handlers.keyboards import get_weekday_buttons
from handlers.study.common import get_day
from handlers.study.current_schedule import get_schedule
from aiogram.exceptions import TelegramBadRequest


from .profile_utils import clear_previous_bot_messages, delete_previous_bot_messages, delete_previous_messages, get_profile_text, get_subgroups_for_group, load_user_profile, save_user_profile, validate_english_group
from .profile_keyboards import (
    get_profile_keyboard,
    get_manage_saved_groups_keyboard,
    get_english_group_keyboard,
    get_institutes_menu,
    get_years_menu,
    get_groups_menu,
    get_subgroups_menu,
    PR_, MG_, SG_
)

router = Router()
user_selections = {}

async def show_profile(target: Union[Message, CallbackQuery], success_message: str = ""):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        profile_text = await get_profile_text(target.from_user.id)
        if success_message:
            profile_text = f"‚úÖ {success_message}\n\n{profile_text}"
        
        if isinstance(target, CallbackQuery):
            try:
                await target.message.edit_text(
                    text=profile_text,
                    reply_markup=get_profile_keyboard()
                )
            except TelegramBadRequest:
                await target.message.answer(
                    text=profile_text,
                    reply_markup=get_profile_keyboard()
                )
        else:
            await target.answer(
                text=profile_text,
                reply_markup=get_profile_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_profile: {e}")
        await target.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    





async def _delete_previous_message(call: CallbackQuery):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await call.message.delete()
    except:
        pass

async def _show_updated_profile(call: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –æ—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await _delete_previous_message(call)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await call.message.answer(
            text=await get_profile_text(call.from_user.id),
            reply_markup=get_profile_keyboard()
        )
    except Exception as e:
        logging.error(f"Profile update error: {e}")
        await call.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥")


async def show_saved_groups(call: CallbackQuery, is_remove_mode: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    try:
        profile = load_user_profile(call.from_user.id)
        
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø" if not profile["saved_groups"] else (
            "üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n" + 
            "\n".join(f"{i+1}. {g['group']} ({g['subgroup']})" 
                     for i, g in enumerate(profile["saved_groups"]))
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(call, CallbackQuery):
            try:
                await call.message.edit_text(
                    text=text,
                    reply_markup=get_manage_saved_groups_keyboard(
                        profile["saved_groups"],
                        is_remove_mode
                    )
                )
            except TelegramBadRequest:
                await call.message.answer(
                    text=text,
                    reply_markup=get_manage_saved_groups_keyboard(
                        profile["saved_groups"],
                        is_remove_mode
                    )
                )
        else:
            await call.answer(
                text=text,
                reply_markup=get_manage_saved_groups_keyboard(
                    profile["saved_groups"],
                    is_remove_mode
                )
            )
    except Exception as e:
        logging.error(f"Show groups error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")


async def save_group_selection(
    call: CallbackQuery, 
    group_data: Dict, 
    is_main_group: bool
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É (–æ—Å–Ω–æ–≤–Ω—É—é –∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)"""
    user_id = call.from_user.id
    profile = load_user_profile(user_id)
    
    if is_main_group:
        profile.update({
            "main_group": group_data["group"],
            "subgroup": group_data["subgroup"]
        })
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        if not any(g["group"] == group_data["group"] for g in profile["saved_groups"]):
            profile["saved_groups"].append(group_data)
            await call.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_data['group']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        else:
            await call.answer("‚ö†Ô∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    
    save_user_profile(user_id, profile)
    await show_saved_groups(call)

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            text=await get_profile_text(message.from_user.id),
            reply_markup=get_profile_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_profile: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")


async def show_group_schedule(call: CallbackQuery, group: str, subgroup: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        today = get_day()
        current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"
        
        schedule_data = loadData("schedule")
        
        response = get_schedule(group, subgroup, current_week, today, schedule_data)
        
        await call.message.answer(
            f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group} ({subgroup}):\n\n{response}",
            reply_markup=get_weekday_buttons(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Show group schedule error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@router.callback_query(F.data.startswith(PR_))
async def handle_profile_actions(call: CallbackQuery):
    """–ü–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        action = call.data.replace(PR_, "")
        user_id = call.from_user.id
        profile = load_user_profile(user_id)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.delete()
        except:
            pass

        if action == "back":
            await show_profile(call)
            
        elif action == "change_subgroup":
            if not profile["main_group"]:
                await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É!")
                await show_profile(call)
                return
                
            await call.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è {profile['main_group']}:",
                reply_markup=get_subgroups_menu(profile["main_group"], "main")
            )
            
        elif action == "set_english":
            await call.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É (3 —Ü–∏—Ñ—Ä—ã):\n\n"
                "–ü—Ä–∏–º–µ—Ä: 440, 441 –∏–ª–∏ 442",
                reply_markup=get_english_group_keyboard()
            )
            
        elif action == "manage_saved":
            await show_saved_groups(call)
            
        elif action == "start_remove":
            await show_saved_groups(call, is_remove_mode=True)
            
        elif action.startswith("remove_"):
            group_idx = int(action.split("_")[1])
            if 0 <= group_idx < len(profile["saved_groups"]):
                removed_group = profile["saved_groups"].pop(group_idx)
                save_user_profile(user_id, profile)
                await call.answer(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {removed_group['group']}")
            await show_saved_groups(call)
            
        elif action.startswith("show_"):
            group_idx = int(action.split("_")[1])
            if 0 <= group_idx < len(profile["saved_groups"]):
                selected = profile["saved_groups"][group_idx]
                await show_group_schedule(
                    call,
                    selected["group"],
                    selected["subgroup"]
                )
                await show_saved_groups(call)
                
    except Exception as e:
        logging.error(f"Profile action error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        await show_profile(call)




@router.callback_query(F.data == PR_ + "change_subgroup")
async def handle_change_subgroup(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–≥—Ä—É–ø–ø—ã —Å —á–∏—Å—Ç—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º"""
    try:
        profile = load_user_profile(call.from_user.id)
        
        if not profile["main_group"]:
            await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É!")
            return
            
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.delete()
        except:
            pass
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
        await call.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è {profile['main_group']}:",
            reply_markup=get_subgroups_menu(profile["main_group"], "main")
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã")

@router.callback_query(F.data.startswith(MG_ + "sub_"))
async def handle_subgroup_selection(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã"""
    try:
        user_id = call.from_user.id
        subgroup = call.data.split("_")[-1]
        
        profile = load_user_profile(user_id)
        if not profile.get("main_group"):
            await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É")
            return
            
        profile["subgroup"] = subgroup
        save_user_profile(user_id, profile)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞
        await delete_previous_bot_messages(call)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_profile(call, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    except Exception as e:
        logging.error(f"Subgroup selection error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–≥—Ä—É–ø–ø—ã")


async def _delete_all_selection_messages(call: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    try:
        bot = Bot.get_current()
        async for msg in bot.get_chat_history(call.message.chat.id):
            if msg.from_user.id == bot.id:
                await msg.delete()
                await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood
    except Exception as e:
        logging.error(f"Message cleanup error: {e}")




@router.callback_query(F.data.startswith(MG_ + "group_"))
async def handle_group_selection(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    try:
        user_id = call.from_user.id
        group_name = call.data.split("_")[-1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –°–†–ê–ó–£
        profile = load_user_profile(user_id)
        profile["main_group"] = group_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø–æ–¥–≥—Ä—É–ø–ø—ã
        save_user_profile(user_id, profile)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id not in user_selections:
            user_selections[user_id] = {}
        user_selections[user_id]["group"] = group_name
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã
        subgroups = get_subgroups_for_group(group_name)
        
        await call.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è {group_name} (–¥–æ—Å—Ç—É–ø–Ω–æ {len(subgroups)}):",
            reply_markup=get_subgroups_menu(group_name, "main")
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        updated = load_user_profile(user_id)
        if updated["main_group"] != group_name:
            logging.error(f"–û–®–ò–ë–ö–ê: –ì—Ä—É–ø–ø–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å! –û–∂–∏–¥–∞–ª–æ—Å—å {group_name}, –ø–æ–ª—É—á–∏–ª–∏ {updated['main_group']}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã")


@router.callback_query(F.data.startswith(PR_ + "show_"))
async def handle_show_saved_group(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        group_idx = int(call.data.split("_")[1])
        profile = load_user_profile(call.from_user.id)
        
        if 0 <= group_idx < len(profile["saved_groups"]):
            selected = profile["saved_groups"][group_idx]
            
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
            await call.message.edit_text(
                text=f"üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n" +
                     "\n".join(f"{i+1}. {g['group']} ({g['subgroup']})" 
                              for i, g in enumerate(profile["saved_groups"])),
                reply_markup=get_manage_saved_groups_keyboard(profile["saved_groups"])
            )
            
            # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await show_group_schedule(call, selected["group"], selected["subgroup"])
            
    except Exception as e:
        logging.error(f"Show saved group error: {e}")
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await show_saved_groups(call)


@router.callback_query(F.data.startswith(MG_))
async def handle_main_group_flow(call: CallbackQuery):
    """–ü–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        data_parts = call.data.replace(MG_, "").split("_")
        user_id = call.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not user_selections.get(user_id):
            user_selections[user_id] = {"context": "main"}
        
        ###########################################
        # 1. –°—Ç–∞—Ä—Ç –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã
        ###########################################
        if data_parts[0] == "start":
            await call.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã:",
                reply_markup=get_institutes_menu("main")
            )
            return
        
        ###########################################
        # 2. –í—ã–±–æ—Ä –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
        ###########################################
        elif data_parts[0] == "inst":
            user_selections[user_id].update({
                "institute": data_parts[1],
                "context": "main"
            })
            
            await call.message.edit_text(
                f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {data_parts[1]}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
                reply_markup=get_years_menu(data_parts[1], "main")
            )
            return
        
        ###########################################
        # 3. –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
        ###########################################
        elif data_parts[0] == "year":
            user_selections[user_id]["year"] = data_parts[1]
            
            await call.message.edit_text(
                f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {user_selections[user_id]['institute']}\n"
                f"–ö—É—Ä—Å: {data_parts[1]}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                reply_markup=get_groups_menu(
                    user_selections[user_id]["institute"],
                    data_parts[1],
                    "main"
                )
            )
            return
        
        ###########################################
        # 4. –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        ###########################################
        elif data_parts[0] == "group":
            user_selections[user_id]["group"] = data_parts[1]
            group_name = data_parts[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã
            subgroups = get_subgroups_for_group(group_name)
            
            await call.message.edit_text(
                f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥–≥—Ä—É–ø–ø: {len(subgroups)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:",
                reply_markup=get_subgroups_menu(group_name, "main")
            )
            return
        
        ###########################################
        # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã
        ###########################################
        elif data_parts[0] == "sub":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
            if "group" not in user_selections.get(user_id, {}):
                await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É")
                return
                
            subgroup = data_parts[1]
            
            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            new_profile = {
                "main_group": user_selections[user_id]["group"],
                "subgroup": subgroup
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            try:
                save_user_profile(user_id, new_profile)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                await call.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_selections.pop(user_id, None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await call.message.edit_text(
                f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n"
                f"{new_profile['main_group']} ({new_profile['subgroup']})",
                reply_markup=get_profile_keyboard()
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            updated = load_user_profile(user_id)
            if updated["main_group"] != new_profile["main_group"]:
                logging.error(f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö! –û–∂–∏–¥–∞–ª–æ—Å—å {new_profile['main_group']}, –ø–æ–ª—É—á–∏–ª–∏ {updated['main_group']}")
        
        ###########################################
        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        ###########################################
        elif data_parts[0] == "back":
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await call.message.delete()
            except TelegramBadRequest:
                pass
            
            if data_parts[1] == "inst":
                await call.message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
                    reply_markup=get_institutes_menu("main")
                )
            elif data_parts[1] == "year":
                institute = user_selections[user_id]["institute"]
                await call.message.answer(
                    f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
                    reply_markup=get_years_menu(institute, "main")
                )
            elif data_parts[1] == "group":
                institute = user_selections[user_id]["institute"]
                year = user_selections[user_id]["year"]
                await call.message.answer(
                    f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute}\n–ö—É—Ä—Å: {year}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                    reply_markup=get_groups_menu(institute, year, "main")
                )
            return
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_main_group_flow: {e}")
        try:
            await call.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /profile"
            )
        except:
            pass
        

@router.callback_query(F.data.startswith(SG_))
async def handle_saved_groups_flow(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    data_parts = call.data.replace(SG_, "").split("_")
    user_id = call.from_user.id
    
    if not user_selections.get(user_id):
        user_selections[user_id] = {"context": "saved"}
    
    if data_parts[0] == "start":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
            reply_markup=get_institutes_menu("saved")
        )
    elif data_parts[0] == "inst":
        user_selections[user_id].update({
            "institute": data_parts[1],
            "context": "saved"
        })
        await call.message.edit_text(
            f"–ò–Ω—Å—Ç–∏—Ç—É—Ç {data_parts[1]}. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
            reply_markup=get_years_menu(data_parts[1], "saved")
        )
    elif data_parts[0] == "year":
        user_selections[user_id]["year"] = data_parts[1]
        await call.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É ({user_selections[user_id]['institute']}, {data_parts[1]} –∫—É—Ä—Å):",
            reply_markup=get_groups_menu(
                user_selections[user_id]["institute"],
                data_parts[1],
                "saved"
            )
        )
    elif data_parts[0] == "group":
        user_selections[user_id]["group"] = data_parts[1]
        await call.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è {data_parts[1]}:",
            reply_markup=get_subgroups_menu(data_parts[1], "saved")
        )
    elif data_parts[0] == "sub":
        await save_group_selection(
            call,
            {
                "group": user_selections[user_id]["group"],
                "subgroup": data_parts[1],
                "institute": user_selections[user_id].get("institute")
            },
            is_main_group=False
        )

@router.message(F.text.regexp(r"^\d{3}$"))
async def handle_english_group_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É"""
    if not validate_english_group(message.text):
        await message.answer(
            "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: 440, 441, 442",
            reply_markup=get_english_group_keyboard()
        )
        return
    
    profile = load_user_profile(message.from_user.id)
    profile["english_group"] = message.text
    save_user_profile(message.from_user.id, profile)
    await show_profile(message)