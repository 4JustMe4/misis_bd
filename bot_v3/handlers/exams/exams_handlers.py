import json
import os
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.loader import loadData

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SessionStates(StatesGroup):
    waiting_for_institute = State()
    waiting_for_year = State()
    waiting_for_group = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def load_users_data() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return loadData("users")

def load_session_data() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
    return loadData("session")

def load_groups_data() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø"""
    return loadData("groups")

def get_user_main_group(user_id: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users_data()
    return users.get(str(user_id), {}).get("main_group")

def format_exam_day(date: str, exams: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω—å —Å —ç–∫–∑–∞–º–µ–Ω–∞–º–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    parts = []
    
    for part_num, exam_data in exams.items():
        if exam_data.get("subject"):
            time = "9:00-12:00" if part_num == "1" else "13:00-16:00"
            parts.append(
                f"‚ñ™Ô∏è {time} - <b>{exam_data['subject']}</b>\n"
                f"üìç {exam_data['place'] or '–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
            )
    
    if not parts:
        return ""
    
    return f"üìÖ <b>{date}</b>\n" + "\n\n".join(parts) + "\n"

def get_session_schedule(group_name: str, session_path: str = "data/session.json") -> str:
    data = loadData("session")
    
    if group_name not in data:
        return f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    result_lines = [f"üìù –≠–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã {group_name}:"]
    subgroup_data = data[group_name]

    for subgroup, dates in subgroup_data.items():
        for date, halves in dates.items():
            for half_day, session in halves.items():
                subject = session.get('subject', '').strip()
                place = session.get('place', '').strip()

                if subject:
                    half_str = "–ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è" if half_day == "1" else "–≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è"
                    place_str = place if place else "–∞—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    result_lines.append(
                        f"üëæ {subject} {date}, {half_str} {place_str}"
                    )

    if len(result_lines) == 1:
        return f"‚ÑπÔ∏è –î–ª—è –≥—Ä—É–ø–ø—ã {group_name} –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏."
    
    return "\n".join(result_lines)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_session_menu() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏"""
    buttons = [
        [KeyboardButton(text="–ú–æ–∏ —ç–∫–∑–∞–º–µ–Ω—ã")],
        [KeyboardButton(text="–≠–∫–∑–∞–º–µ–Ω—ã –ø–æ –≥—Ä—É–ø–ø–∞–º")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_institutes_menu() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ (Inline)"""
    groups_data = load_groups_data()
    institutes = list(groups_data.keys())
    buttons = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(institutes), 3):
        row = institutes[i:i+3]
        buttons.append([InlineKeyboardButton(text=inst, callback_data=f"exams_inst_{inst}") for inst in row])
    
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exams_back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_years_menu(institute: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞ (Inline)"""
    groups_data = load_groups_data()
    years = list(groups_data.get(institute, {}).keys())
    buttons = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(years), 2):
        row = years[i:i+2]
        buttons.append([InlineKeyboardButton(text=year, callback_data=f"exams_year_{year}") for year in row])
    
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="exams_back_to_inst")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_groups_menu(institute: str, year: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã (Inline)"""
    groups_data = load_groups_data()
    groups = groups_data.get(institute, {}).get(year, [])
    buttons = []
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    for i in range(0, len(groups), 3):
        row = groups[i:i+3]
        buttons.append([InlineKeyboardButton(text=group, callback_data=f"exams_group_{group}") for group in row])
    
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"exams_back_to_years_{institute}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏")
async def show_session_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–µ—Å—Å–∏–∏"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_session_menu()
    )

@router.message(F.text == "–ú–æ–∏ —ç–∫–∑–∞–º–µ–Ω—ã")
async def show_my_exams(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)
    main_group = get_user_main_group(user_id)
    
    if not main_group:
        await message.answer("‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.")
        return
    
    session_data = load_session_data()
    group_exams = session_data.get(main_group, {}).get("1", {})  # –ü–æ–¥–≥—Ä—É–ø–ø–∞ 1
    
    if not group_exams:
        await message.answer(f"‚ÑπÔ∏è –î–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã {main_group} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö.")
        return
    
    result = [f"üìù –≠–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã {main_group}:\n"]
    
    for date, exams in sorted(group_exams.items()):
        formatted = format_exam_day(date, exams)
        if formatted:
            result.append(formatted)
    
    if len(result) == 1:
        await message.answer(f"‚ÑπÔ∏è –î–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã {main_group} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤.")
    else:
        await message.answer("\n".join(result), parse_mode='HTML')

@router.message(F.text == "–≠–∫–∑–∞–º–µ–Ω—ã –ø–æ –≥—Ä—É–ø–ø–∞–º")
async def start_group_search(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
        reply_markup=get_institutes_menu()
    )
    await state.set_state(SessionStates.waiting_for_institute)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
@router.callback_query(F.data.startswith("exams_inst_"))
async def process_institute_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    institute = callback.data.replace("exams_inst_", "")
    await state.update_data(institute=institute)
    
    await callback.message.edit_text(
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=get_years_menu(institute)
    )
    await state.set_state(SessionStates.waiting_for_year)
    await callback.answer()

@router.callback_query(F.data.startswith("exams_year_"))
async def process_year_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞"""
    year = callback.data.replace("exams_year_", "")
    data = await state.get_data()
    institute = data.get("institute")
    
    await state.update_data(year=year)
    
    await callback.message.edit_text(
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute}\n–ö—É—Ä—Å: {year}\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=get_groups_menu(institute, year)
    )
    await state.set_state(SessionStates.waiting_for_group)
    await callback.answer()

@router.callback_query(F.data.startswith("exams_group_"))
async def process_group_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫–∑–∞–º–µ–Ω—ã"""
    group = callback.data.replace("exams_group_", "")
    session_data = load_session_data()
    group_exams = session_data.get(group, {}).get("1", {})  # –ü–æ–¥–≥—Ä—É–ø–ø–∞ 1
    
    if not group_exams:
        await callback.message.answer(f"‚ÑπÔ∏è –î–ª—è –≥—Ä—É–ø–ø—ã {group} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç–∫–∑–∞–º–µ–Ω–∞—Ö.")
        await state.clear()
        return
    
    result = [f"üìù –≠–∫–∑–∞–º–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:\n"]
    
    for date, exams in sorted(group_exams.items()):
        formatted = format_exam_day(date, exams)
        if formatted:
            result.append(formatted)
    
    if len(result) == 1:
        await callback.message.answer(f"‚ÑπÔ∏è –î–ª—è –≥—Ä—É–ø–ø—ã {group} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤.")
    else:
        await callback.message.answer("\n".join(result), parse_mode='HTML')
    
    await state.clear()
    await callback.answer()

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
@router.callback_query(F.data == "exams_back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–µ—Å—Å–∏–∏"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_session_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "exams_back_to_inst")
async def back_to_institutes(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
        reply_markup=get_institutes_menu()
    )
    await state.set_state(SessionStates.waiting_for_institute)
    await callback.answer()

@router.callback_query(F.data.startswith("exams_back_to_years_"))
async def back_to_years(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞"""
    institute = callback.data.replace("exams_back_to_years_", "")
    await state.update_data(institute=institute)
    
    await callback.message.edit_text(
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
        reply_markup=get_years_menu(institute)
    )
    await state.set_state(SessionStates.waiting_for_year)
    await callback.answer()

@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from handlers.user_profile import get_main_menu
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )