from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from typing import Union
import json
import random
import re

from handlers.keyboards import (
    get_main_menu,
    get_class_schedule_menu,
    get_institutes_menu,
    get_years_menu,
    get_groups_menu,
    get_subgroups_menu,
    get_save_confirmation_menu,
    get_weekday_buttons
)






router = Router()

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è ---
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –ë–î
user_profile = {
    "group": "–ë–ü–ú-21-1",
    "subgroup": "all",
    "saved_groups": []  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_selections = {}

def get_day():
    day = datetime.today().strftime("%A")
    days = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return days.get(day, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")

today = get_day()
current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"


def add_invisible_chars(text):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (zero-width space) –≤ —Ç–µ–∫—Å—Ç.
    """
    invisible_char = "\u200B"  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
    parts = text.split("\n")
    modified_parts = [line + invisible_char * random.randint(0, 2) for line in parts]
    return "\n".join(modified_parts)


def extract_group_from_message(text: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    import re
    invisible_separator = "\u2063"
    pattern = re.compile(f"{invisible_separator}(.*?){invisible_separator}(.*?){invisible_separator}")
    match = pattern.search(text)
    if match:
        return match.group(1), match.group(2)  # group, subgroup
    return None, None







# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
def get_schedule(group, subgroup, week_type, day, schedule):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, –ø–æ–¥–≥—Ä—É–ø–ø—ã (–∏–ª–∏ –≤—Å–µ—Ö –ø–æ–¥–≥—Ä—É–ø–ø), –Ω–µ–¥–µ–ª–∏ (upper/lower) –∏ –¥–Ω—è."""
    if group not in schedule:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§î\n"
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞, –Ω–æ –µ—ë –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã
    if subgroup != "all" and subgroup not in schedule[group]:
        subgroup = "all"
    
    response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}</b>\n"
    response += f"{day}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è:\n\n"

    times = {
        "1": "9:00 ‚Äî 10:35",
        "2": "10:50 ‚Äî 12:25",
        "3": "12:40 ‚Äî 14:15",
        "4": "14:30 ‚Äî 16:05",
        "5": "16:20 ‚Äî 17:55",
        "6": "18:00 ‚Äî 19:25",
        "7": "19:35 ‚Äî 21:00"
    }

    if subgroup == "all":
        pairs = {}
        for sub in schedule[group]:
            if day not in schedule[group][sub]:
                continue

            for pair_num, pair_data in schedule[group][sub][day].items():
                week_data = pair_data.get(week_type, {"subject": "", "place": ""})
                
                if not week_data["subject"] and not week_data["place"]:
                    continue

                key = (pair_num, week_data["subject"], week_data["place"])
                if key not in pairs:
                    pairs[key] = set()
                pairs[key].add(sub)

        if pairs:
            for (pair_num, subject, place), subgroups in sorted(pairs.items()):
                response += (
                    f"{pair_num} –ø–∞—Ä–∞ ({times.get(pair_num, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è')})\n"
                    f"<b>{subject}</b>\n"
                    f"{group} [{', '.join(subgroups)}]\n"
                    f"{place}\n\n"
                )
        else:
            response += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"
    else:
        if day not in schedule[group][subgroup]:
            return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"

        pairs = []
        for pair_num, pair_data in schedule[group][subgroup][day].items():
            week_data = pair_data.get(week_type, {"subject": "", "place": ""})
            
            if not week_data["subject"] and not week_data["place"]:
                continue

            pairs.append({
                "num": pair_num,
                "time": times.get(pair_num, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"),
                "subject": week_data["subject"],
                "place": week_data["place"]
            })

        if pairs:
            for pair in pairs:
                response += (
                    f"{pair['num']} –ø–∞—Ä–∞ ({pair['time']})\n"
                    f"<b>{pair['subject']}</b>\n"
                    f"{pair['place']}\n\n"
                )
        else:
            response += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"

    response += f"–°–µ–≥–æ–¥–Ω—è {today}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è\n"
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    invisible_separator = "\u2063"  # –ù–µ–≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    metadata = f"{invisible_separator}{group}{invisible_separator}{subgroup}{invisible_separator}"
    return add_invisible_chars(response + metadata)







# --- –•—ç–Ω–¥–ª–µ—Ä "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π" ---
@router.message(F.text == "–°–µ–≥–æ–¥–Ω—è")
async def today_schedule(message: Message):
    """–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å."""
    if "group" not in user_profile:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ /my_profile")
        return
    
    group = user_profile["group"]
    subgroup = user_profile["subgroup"]

    with open("data/schedule.json", "r", encoding="utf-8") as file:
        schedule = json.load(file)

    response = get_schedule(group, subgroup, current_week, today, schedule)

    await message.answer(response, parse_mode='HTML')








# --- –•—ç–Ω–¥–ª–µ—Ä "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" ---
@router.message(F.text == "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–ª–∞–≤–∞—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    if "group" not in user_profile:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ /my_profile")
        return

    group = user_profile["group"]
    subgroup = user_profile["subgroup"]

    with open("data/schedule.json", "r", encoding="utf-8") as file:
        schedule = json.load(file)

    response = get_schedule(group, subgroup, current_week, today, schedule)

    await message.answer(response, reply_markup=get_weekday_buttons(), parse_mode='HTML')


# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" ---
@router.callback_query(F.data.startswith("weekday_"))
async def weekday_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        group, subgroup = extract_group_from_message(call.message.text or "")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
        if not group:
            if call.from_user.id in user_selections and "selected_group" in user_selections[call.from_user.id]:
                group = user_selections[call.from_user.id]["selected_group"]["group"]
                subgroup = user_selections[call.from_user.id]["selected_group"]["subgroup"]
            else:
                group = user_profile.get("group", "–ë–ü–ú-21-1")
                subgroup = user_profile.get("subgroup", "all")

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        parts = call.data.split("_")
        day_part, week = parts[1], parts[2]
        day = day_part.capitalize()
        
        days = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞"
        }
        day = days.get(day, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")

        with open("data/schedule.json", "r", encoding="utf-8") as file:
            schedule = json.load(file)

        response = get_schedule(group, subgroup, week, day, schedule)
        await call.message.edit_text(
            text=response,
            reply_markup=get_weekday_buttons(),
            parse_mode='HTML'
        )
    except Exception as e:
        await call.answer(f"–û—à–∏–±–∫–∞: {str(e)}")



async def update_or_send_message(bot: Bot, message: Message, new_text: str, reply_markup=None, parse_mode=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ."""
    try:
        if message.from_user.id in user_selections and "message_id" in user_selections[message.from_user.id]:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=user_selections[message.from_user.id]["message_id"],
                text=new_text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            msg = await message.answer(new_text, reply_markup=reply_markup, parse_mode=parse_mode)
            user_selections[message.from_user.id]["message_id"] = msg.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        msg = await message.answer(new_text, reply_markup=reply_markup, parse_mode=parse_mode)
        user_selections[message.from_user.id]["message_id"] = msg.message_id










# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä–∞
@router.message(F.text == "–ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
async def full_schedule_start(message: Message):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_selections[message.from_user.id] = {}
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
        reply_markup=get_institutes_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith("inst_"))
async def choose_institute(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    institute = call.data.split("_")[1]
    user_selections[call.from_user.id] = {"institute": institute}
    
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ {institute}:",
        reply_markup=get_years_menu(institute)
    )

@router.callback_query(F.data.startswith("year_"))
async def choose_year(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
    year = call.data.split("_")[1]
    user_id = call.from_user.id
    
    if user_id not in user_selections:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    user_selections[user_id]["year"] = year
    institute = user_selections[user_id]["institute"]
    
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ {institute}, –∫—É—Ä—Å {year}:",
        reply_markup=get_groups_menu(institute, year)
    )

@router.callback_query(F.data.startswith("group_"))
async def choose_group(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    group = call.data.split("_")[1]
    user_id = call.from_user.id
    
    if user_id not in user_selections or "year" not in user_selections[user_id]:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    user_selections[user_id]["group"] = group
    institute = user_selections[user_id]["institute"]
    
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group}, {institute}:",
        reply_markup=get_subgroups_menu()
    )

@router.callback_query(F.data.startswith("subgroup_"))
async def choose_subgroup(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã"""
    subgroup = call.data.split("_")[1]
    user_id = call.from_user.id
    
    if user_id not in user_selections or "group" not in user_selections[user_id]:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    subgroup = subgroup if subgroup != "all" else "all"
    user_selections[user_id]["subgroup"] = subgroup
    group = user_selections[user_id]["group"]
    institute = user_selections[user_id]["institute"]
    
    user_selections[user_id]["selected_group"] = {
        "group": group,
        "subgroup": subgroup,
        "institute": institute
    }
    
    await call.message.edit_text(
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É {group}({subgroup}) –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?",
        reply_markup=get_save_confirmation_menu()
    )



@router.callback_query(F.data.startswith("save_"))
async def confirm_save(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    try:
        action = call.data.split("_")[1]
        user_id = call.from_user.id
        
        if user_id not in user_selections or "selected_group" not in user_selections[user_id]:
            await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
            return
        
        selected = user_selections[user_id]["selected_group"]
        group = selected["group"]
        subgroup = selected["subgroup"]
        
        if action == "yes":
            if "saved_groups" not in user_profile:
                user_profile["saved_groups"] = []
            
            if not any(g["group"] == group for g in user_profile["saved_groups"]):
                user_profile["saved_groups"].append(selected)
                await call.answer("–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚úÖ")

        with open("data/schedule.json", "r", encoding="utf-8") as f:
            schedule_data = json.load(f)
        
        schedule = get_schedule(group, subgroup, current_week, today, schedule_data)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            await call.message.edit_text(
                text=schedule,
                reply_markup=get_weekday_buttons(),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await call.message.answer(
                text=schedule,
                reply_markup=get_weekday_buttons(),
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_save: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    
    # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #user_selections.pop(user_id, None)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_main")
async def back_to_main(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_class_schedule_menu()
    )



@router.callback_query(F.data == "back_to_inst")
async def back_to_institutes(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
        reply_markup=get_institutes_menu()
    )



@router.callback_query(F.data.startswith("back_to_years_"))
async def back_to_years(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞"""
    institute = call.data.split("_")[-1]
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ {institute}:",
        reply_markup=get_years_menu(institute)
    )



@router.callback_query(F.data == "back_to_groups")
async def back_to_groups(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã"""
    user_id = call.from_user.id
    if user_id not in user_selections:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    institute = user_selections[user_id]["institute"]
    year = user_selections[user_id]["year"]
    
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é –≥—Ä—É–ø–ø—É –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ {institute}, –∫—É—Ä—Å {year}:",
        reply_markup=get_groups_menu(institute, year)
    )



@router.callback_query(F.data == "back_to_subgroups")
async def back_to_subgroups(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–≥—Ä—É–ø–ø—ã"""
    user_id = call.from_user.id
    if user_id not in user_selections or "group" not in user_selections[user_id]:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    group = user_selections[user_id]["group"]
    institute = user_selections[user_id]["institute"]
    
    await call.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group}, {institute}:",
        reply_markup=get_subgroups_menu()
    )









def normalize_group_name(group: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–ë–ò–í–¢-21-1)"""
    group = group.upper().replace(" ", "-")
    parts = group.split("-")
    if len(parts) >= 2:
        return f"{parts[0]}-{parts[1]}" + (f"-{parts[2]}" if len(parts) > 2 else "")
    return group

def find_group_matches(query: str) -> list:
    """–ù–∞—Ö–æ–¥–∏—Ç –≥—Ä—É–ø–ø—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É"""
    with open("data/groups.json", "r", encoding="utf-8") as f:
        groups_data = json.load(f)
    
    query = normalize_group_name(query)
    all_groups = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–∞
    for institute in groups_data.values():
        for year_groups in institute.values():
            all_groups.extend(year_groups)
    
    # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    exact_matches = [g for g in all_groups if g == query]
    if exact_matches:
        return exact_matches
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã)
    partial_matches = [g for g in all_groups if g.startswith(query)]
    if partial_matches:
        return partial_matches
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–∞—á–∞–ª—å–Ω—ã–º –±—É–∫–≤–∞–º –∏ –≥–æ–¥—É
    if "-" in query:
        base, year = query.split("-")[:2]
        similar = [g for g in all_groups if g.startswith(base) and year in g]
        return similar
    
    return []



async def show_group_schedule(
    message_or_call: Union[Message, CallbackQuery], 
    group: str, 
    subgroup: str
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    if isinstance(message_or_call, CallbackQuery):
        message = message_or_call.message
        user_id = message_or_call.from_user.id
    else:
        message = message_or_call
        user_id = message.from_user.id

    with open("data/schedule.json", "r", encoding="utf-8") as f:
        schedule_data = json.load(f)
    
    schedule = get_schedule(group, subgroup, current_week, today, schedule_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    user_selections[user_id] = {
        "selected_group": {
            "group": group,
            "subgroup": subgroup,
            "institute": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
    }
    
    await message.answer(
        schedule,
        reply_markup=get_weekday_buttons(),
        parse_mode="HTML"
    )



@router.message(F.text)
async def handle_direct_group_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_input = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã
    if not re.match(r"^[–ê-–Ø–Å]{2,}", user_input):
        return
    
    with open("data/schedule.json", "r", encoding="utf-8") as f:
        schedule_data = json.load(f)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if user_input in schedule_data:
        await show_group_schedule(message, user_input, "all")
        return
    
    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≥—Ä—É–ø–ø—ã
    similar_groups = find_group_matches(user_input)
    
    if not similar_groups:
        await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    if len(similar_groups) == 1:
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        await show_group_schedule(message, similar_groups[0], "all")
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        buttons = []
        for group in similar_groups[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            buttons.append([InlineKeyboardButton(
                text=group,
                callback_data=f"quick_group_{group}"
            )])
        
        buttons.append([InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∞",
            callback_data="quick_group_cancel"
        )])
        
        await message.answer(
            "–£—Ç–æ—á–Ω–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


@router.callback_query(F.data.startswith("quick_group_"))
async def handle_quick_group_select(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    if call.data == "quick_group_cancel":
        await call.message.delete()
        return
    
    group = call.data.split("_")[2]
    await show_group_schedule(call, group, "all")
