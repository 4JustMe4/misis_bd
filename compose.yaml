
name: tgbot

x-env-file: &env-file
  env_file:
    - path: ./defaults.env
      required: true
    - path: ./secrets.env
      required: false

x-healthcheck-params: &healthcheck-params
  interval: 10s
  timeout: 5s
  retries: 3
  start_period: 30s

x-db-depends: &db-depends
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    mongo:
      condition: service_healthy

services:
  redis:
    # redis:7.4.2-alpine3.21 # for example
    image: @redis_imageid@
    restart: always
    healthcheck:
      test: redis-cli ping
      <<: *healthcheck-params
    #depends_on:
    #  initscript:
    #    condition: service_completed_successfully
    expose:
      - "6379"
    <<: *env-file
    # REDIS_PASSWORD
    #volumes:
    #  - type: volume
    #    source: data
    #    target: /data
    #    volume:
    #      subpath: redis_data

  postgres:
    # postgres:17.4-alpine3.21 for example
    image: @postgres_imageid@
    restart: always
    healthcheck:
      test: pg_isready -U \$POSTGRES_USER -d \$POSTGRES_DB
      <<: *healthcheck-params
    depends_on:
      initscript:
        condition: service_completed_successfully
    expose:
      - "5432"
    <<: *env-file
    # POSTGRES_USER
    # POSTGRES_PASSWORD
    volumes:
      - type: volume
        target: /var/lib/postgresql/data
        source: data
        volume:
          subpath: postgres

  mongo:
    # mongo:8.0.8-noble for example
    image: @mongo_imageid@
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      <<: *healthcheck-params
    depends_on:
      initscript:
        condition: service_completed_successfully
    expose:
      - "27017"
    <<: *env-file
    # MONGO_INITDB_ROOT_USERNAME
    # MONGO_INITDB_ROOT_PASSWORD
    volumes:
      - type: volume
        source: data
        target: /data/db
        volume:
          subpath: mongo

  tgbot:
    # local image
    image: @tgbot_imageid@
    restart: always
    <<: *db-depends
    <<: *env-file
    # BOT_TOKEN

  dbupdater:
    image: @tgbot_imageid@
    <<: *db-depends
    <<: *env-file
    working_dir: /bot_parser
    command: sh -c 'while true; do python3 update.py; sleep 3600; done'

  initscript:
    # base alpine image
    image: @alpine_imageid@
    # workaround cause docker compose doesn't create them currently
    command: |
      mkdir -p /volume/postgres /volume/mongo
    volumes:
      - data:/volume

volumes:
  data:

#networks:
    # all services share the same network by default
    # unless explicitly specified
    #
    #default: {}


# .env file variables required
# POSTGRES_USER
# POSTGRES_PASSWORD
# POSTGRES_DB
# MONGO_INITDB_ROOT_USERNAME
# MONGO_INITDB_ROOT_PASSWORD
# REDIS_PASSWORD
# BOT_TOKEN
#
# To pull the required services, run:
# docker compose pull initscript redis postgres mongo
#
# To run docker-compose bundles for production
# PROFILE=prod sudo docker compose ...
#
# To run docker-compose bundles for testing
# PROFILE=prod sudo docker compose ...
