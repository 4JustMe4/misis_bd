from aiogram import Router, F, types
from aiogram.types import Message

import json
import random
from datetime import datetime, timedelta

from .common import user_profile, user_selections, get_day, get_tomorrow

from handlers.keyboards import (
    get_weekday_buttons
)

router = Router()


# –•—ç–Ω–¥–ª–µ—Ä—ã
# --- –•—ç–Ω–¥–ª–µ—Ä "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π" ---
@router.message(F.text == "–°–µ–≥–æ–¥–Ω—è")
async def today_schedule(message: Message):
    today = get_day()
    current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"

    #–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.#
    if "group" not in user_profile:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ /my_profile")
        return
    
    group = user_profile["group"]
    subgroup = user_profile["subgroup"]

    with open("data/schedule.json", "r", encoding="utf-8") as file:
        schedule = json.load(file)

    response = get_schedule(group, subgroup, current_week, today, schedule)

    await message.answer(response, parse_mode='HTML')


@router.message(F.text == "–ó–∞–≤—Ç—Ä–∞")
async def today_schedule(message: Message):
    tomorrow = get_tomorrow()
    current_week = "upper" if ((datetime.today()+timedelta(days=1)).isocalendar()[1] % 2) != 0 else "lower"

    #–í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.#
    if "group" not in user_profile:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ /my_profile")
        return
    
    group = user_profile["group"]
    subgroup = user_profile["subgroup"]

    with open("data/schedule.json", "r", encoding="utf-8") as file:
        schedule = json.load(file)

    response = get_schedule_next(group, subgroup, current_week, tomorrow, schedule)

    await message.answer(response, parse_mode='HTML')


# --- –•—ç–Ω–¥–ª–µ—Ä "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" ---
@router.message(F.text == "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def my_schedule(message: Message):
    today = get_day()
    current_week = "upper" if (datetime.today().isocalendar()[1] % 2) != 0 else "lower"

    #–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–ª–∞–≤–∞—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.#
    if "group" not in user_profile:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ /my_profile")
        return

    group = user_profile["group"]
    subgroup = user_profile["subgroup"]

    with open("data/schedule.json", "r", encoding="utf-8") as file:
        schedule = json.load(file)

    response = get_schedule(group, subgroup, current_week, today, schedule)

    await message.answer(response, reply_markup=get_weekday_buttons(), parse_mode='HTML')


# --- –•—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" ---
@router.callback_query(F.data.startswith("weekday_"))
async def weekday_callback(call: types.CallbackQuery):
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏#
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        group, subgroup = extract_group_from_message(call.message.text or "")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
        if not group:
            if call.from_user.id in user_selections and "selected_group" in user_selections[call.from_user.id]:
                group = user_selections[call.from_user.id]["selected_group"]["group"]
                subgroup = user_selections[call.from_user.id]["selected_group"]["subgroup"]
            else:
                group = user_profile.get("group", "–ë–ü–ú-21-1")
                subgroup = user_profile.get("subgroup", "all")

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        parts = call.data.split("_")
        day_part, week = parts[1], parts[2]
        day = day_part.capitalize()
        
        days = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "–°—Ä–µ–¥–∞",
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "–°—É–±–±–æ—Ç–∞"
        }
        day = days.get(day, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")

        with open("data/schedule.json", "r", encoding="utf-8") as file:
            schedule = json.load(file)

        response = get_schedule(group, subgroup, week, day, schedule)
        await call.message.edit_text(
            text=response,
            reply_markup=get_weekday_buttons(),
            parse_mode='HTML'
        )
    except Exception as e:
        await call.answer(f"–û—à–∏–±–∫–∞: {str(e)}")



# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
def get_schedule(group, subgroup, week_type, day, schedule):
    today = get_day()
    
    #–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, –ø–æ–¥–≥—Ä—É–ø–ø—ã (–∏–ª–∏ –≤—Å–µ—Ö –ø–æ–¥–≥—Ä—É–ø–ø), –Ω–µ–¥–µ–ª–∏ (upper/lower) –∏ –¥–Ω—è.#
    if group not in schedule:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§î\n"
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞, –Ω–æ –µ—ë –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã
    if subgroup != "all" and subgroup not in schedule[group]:
        subgroup = "all"
    
    response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}</b>\n"
    response += f"{day}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è:\n\n"

    times = {
        "1": "9:00 ‚Äî 10:35",
        "2": "10:50 ‚Äî 12:25",
        "3": "12:40 ‚Äî 14:15",
        "4": "14:30 ‚Äî 16:05",
        "5": "16:20 ‚Äî 17:55",
        "6": "18:00 ‚Äî 19:25",
        "7": "19:35 ‚Äî 21:00"
    }

    if subgroup == "all":
        pairs = {}
        for sub in schedule[group]:
            if day not in schedule[group][sub]:
                continue

            for pair_num, pair_data in schedule[group][sub][day].items():
                week_data = pair_data.get(week_type, {"subject": "", "place": ""})
                
                if not week_data["subject"] and not week_data["place"]:
                    continue

                key = (pair_num, week_data["subject"], week_data["place"])
                if key not in pairs:
                    pairs[key] = set()
                pairs[key].add(sub)

        if pairs:
            for (pair_num, subject, place), subgroups in sorted(pairs.items()):
                response += (
                    f"{pair_num} –ø–∞—Ä–∞ ({times.get(pair_num, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è')})\n"
                    f"<b>{subject}</b>\n"
                    f"{group} [{', '.join(subgroups)}]\n"
                    f"{place}\n\n"
                )
        else:
            response += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"
    else:
        if day not in schedule[group][subgroup]:
            return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"

        pairs = []
        for pair_num, pair_data in schedule[group][subgroup][day].items():
            week_data = pair_data.get(week_type, {"subject": "", "place": ""})
            
            if not week_data["subject"] and not week_data["place"]:
                continue

            pairs.append({
                "num": pair_num,
                "time": times.get(pair_num, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"),
                "subject": week_data["subject"],
                "place": week_data["place"]
            })

        if pairs:
            for pair in pairs:
                response += (
                    f"{pair['num']} –ø–∞—Ä–∞ ({pair['time']})\n"
                    f"<b>{pair['subject']}</b>\n"
                    f"{pair['place']}\n\n"
                )
        else:
            response += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"

    response += f"–°–µ–≥–æ–¥–Ω—è {today}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è\n"
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    invisible_separator = "\u2063"  # –ù–µ–≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    metadata = f"{invisible_separator}{group}{invisible_separator}{subgroup}{invisible_separator}"
    return add_invisible_chars(response + metadata)


def get_schedule_next(group, subgroup, week_type, day, schedule):
    today = get_tomorrow()
    
    #–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, –ø–æ–¥–≥—Ä—É–ø–ø—ã (–∏–ª–∏ –≤—Å–µ—Ö –ø–æ–¥–≥—Ä—É–ø–ø), –Ω–µ–¥–µ–ª–∏ (upper/lower) –∏ –¥–Ω—è.#
    if group not in schedule:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§î\n"
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞, –Ω–æ –µ—ë –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã
    if subgroup != "all" and subgroup not in schedule[group]:
        subgroup = "all"
    
    response = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}</b>\n"
    response += f"{day}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è:\n\n"

    times = {
        "1": "9:00 ‚Äî 10:35",
        "2": "10:50 ‚Äî 12:25",
        "3": "12:40 ‚Äî 14:15",
        "4": "14:30 ‚Äî 16:05",
        "5": "16:20 ‚Äî 17:55",
        "6": "18:00 ‚Äî 19:25",
        "7": "19:35 ‚Äî 21:00"
    }

    if subgroup == "all":
        pairs = {}
        for sub in schedule[group]:
            if day not in schedule[group][sub]:
                continue

            for pair_num, pair_data in schedule[group][sub][day].items():
                week_data = pair_data.get(week_type, {"subject": "", "place": ""})
                
                if not week_data["subject"] and not week_data["place"]:
                    continue

                key = (pair_num, week_data["subject"], week_data["place"])
                if key not in pairs:
                    pairs[key] = set()
                pairs[key].add(sub)

        if pairs:
            for (pair_num, subject, place), subgroups in sorted(pairs.items()):
                response += (
                    f"{pair_num} –ø–∞—Ä–∞ ({times.get(pair_num, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è')})\n"
                    f"<b>{subject}</b>\n"
                    f"{group} [{', '.join(subgroups)}]\n"
                    f"{place}\n\n"
                )
        else:
            response += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"
    else:
        if day not in schedule[group][subgroup]:
            return "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"

        pairs = []
        for pair_num, pair_data in schedule[group][subgroup][day].items():
            week_data = pair_data.get(week_type, {"subject": "", "place": ""})
            
            if not week_data["subject"] and not week_data["place"]:
                continue

            pairs.append({
                "num": pair_num,
                "time": times.get(pair_num, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"),
                "subject": week_data["subject"],
                "place": week_data["place"]
            })

        if pairs:
            for pair in pairs:
                response += (
                    f"{pair['num']} –ø–∞—Ä–∞ ({pair['time']})\n"
                    f"<b>{pair['subject']}</b>\n"
                    f"{pair['place']}\n\n"
                )
        else:
            response += "–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç ü•≥\n"

    response += f"–ó–∞–≤—Ç—Ä–∞ {today}, {'–≤–µ—Ä—Ö–Ω—è—è' if week_type == 'upper' else '–Ω–∏–∂–Ω—è—è'} –Ω–µ–¥–µ–ª—è\n"
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    invisible_separator = "\u2063"  # –ù–µ–≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    metadata = f"{invisible_separator}{group}{invisible_separator}{subgroup}{invisible_separator}"
    return add_invisible_chars(response + metadata)



def add_invisible_chars(text):
    #–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (zero-width space) –≤ —Ç–µ–∫—Å—Ç.#
    invisible_char = "\u200B"  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
    parts = text.split("\n")
    modified_parts = [line + invisible_char * random.randint(0, 2) for line in parts]
    return "\n".join(modified_parts)


def extract_group_from_message(text: str) -> tuple:
    #–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è#
    import re
    invisible_separator = "\u2063"
    pattern = re.compile(f"{invisible_separator}(.*?){invisible_separator}(.*?){invisible_separator}")
    match = pattern.search(text)
    if match:
        return match.group(1), match.group(2)  # group, subgroup
    return None, None